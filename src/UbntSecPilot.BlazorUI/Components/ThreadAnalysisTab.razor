@using UbntSecPilot.Domain.Models
@inject HttpClient Http

<div class="row">
    <div class="col-12">
        <h5>Thread Analysis</h5>
        <p class="text-muted">Analyze chat threads or messages for potential Indicators of Compromise (IoCs).</p>

        <div class="row">
            <div class="col-md-8">
                <div class="mb-3">
                    <label for="threadInput" class="form-label">Thread Messages</label>
                    <textarea class="form-control" id="threadInput" rows="10" @bind="threadInput"
                              placeholder="Enter thread messages, one per line. Optionally prefix with 'author: message'"></textarea>
                </div>

                <button class="btn btn-primary" @onclick="AnalyzeThread" disabled="@analyzingThread">
                    @if (analyzingThread)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                    }
                    Analyze Thread
                </button>
            </div>

            <div class="col-md-4">
                @if (analysisResult != null)
                {
                    <div class="card">
                        <div class="card-header">
                            <h6>Analysis Result</h6>
                        </div>
                        <div class="card-body">
                            <div class="mb-2">
                                <strong>IoC Detected:</strong>
                                <span class="badge bg-@(analysisResult.IsIoc ? "danger" : "success") ms-2">
                                    @(analysisResult.IsIoc ? "Yes" : "No")
                                </span>
                            </div>

                            <div class="mb-2">
                                <strong>Severity:</strong>
                                <span class="badge bg-@GetSeverityColor(analysisResult.Severity) ms-2">
                                    @analysisResult.Severity
                                </span>
                            </div>

                            <div class="mb-2">
                                <strong>Reason:</strong>
                                <p class="mt-1">@analysisResult.Reason</p>
                            </div>

                            @if (analysisResult.Indicators.Any())
                            {
                                <div>
                                    <strong>Indicators Found:</strong>
                                    <ul class="mt-1">
                                        @foreach (var indicator in analysisResult.Indicators)
                                        {
                                            <li class="small">@indicator</li>
                                        }
                                    </ul>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string threadInput = "";
    private bool analyzingThread = false;
    private ThreadAnalysis? analysisResult;

    private async Task AnalyzeThread()
    {
        if (string.IsNullOrWhiteSpace(threadInput))
        {
            return;
        }

        analyzingThread = true;
        analysisResult = null;

        try
        {
            var messages = ParseThreadInput(threadInput);
            var result = await Http.PostAsJsonAsync("/api/analysis/thread", messages);
            if (result.IsSuccessStatusCode)
            {
                analysisResult = await result.Content.ReadFromJsonAsync<ThreadAnalysis>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error analyzing thread: {ex.Message}");
        }
        finally
        {
            analyzingThread = false;
        }
    }

    private List<ThreadMessage> ParseThreadInput(string input)
    {
        var messages = new List<ThreadMessage>();
        var lines = input.Split('\n', StringSplitOptions.RemoveEmptyEntries);

        foreach (var line in lines)
        {
            var trimmedLine = line.Trim();
            if (string.IsNullOrEmpty(trimmedLine))
                continue;

            string? author = null;
            string content = trimmedLine;

            if (trimmedLine.Contains(":") && !trimmedLine.StartsWith("http"))
            {
                var parts = trimmedLine.Split(':', 2);
                if (parts.Length == 2 && !string.IsNullOrWhiteSpace(parts[1]))
                {
                    author = parts[0].Trim();
                    content = parts[1].Trim();
                }
            }

            messages.Add(new ThreadMessage(content, author ?? string.Empty));
        }

        return messages;
    }

    private string GetSeverityColor(string severity)
    {
        return severity.ToLower() switch
        {
            "critical" => "danger",
            "high" => "warning",
            "medium" => "info",
            "low" => "secondary",
            _ => "secondary"
        };
    }
}
