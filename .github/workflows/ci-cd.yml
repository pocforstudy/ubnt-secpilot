name: UBNT SecPilot CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  SOLUTION_PATH: 'UbntSecPilot.sln'

jobs:
  # Quality checks and formatting
  quality-checks:
    name: Code Quality & Formatting
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Check formatting
      run: |
        dotnet format ${{ env.SOLUTION_PATH }} --verify-no-changes --verbosity diagnostic
        if [ $? -ne 0 ]; then
          echo "❌ Code formatting issues found!"
          echo "Run 'dotnet format' locally to fix formatting issues"
          exit 1
        fi
        echo "✅ Code formatting is correct"

    - name: Install dotnet tools
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        dotnet tool install -g dotnet-coverage

    - name: Run tests with coverage
      run: |
        dotnet test ${{ env.SOLUTION_PATH }} --configuration Release --collect:"XPlat Code Coverage" --results-directory ./coverage --verbosity normal

    - name: Generate coverage report
      run: |
        reportgenerator -reports:"./coverage/**/coverage.cobertura.xml" -targetdir:"./coverage-report" -reporttypes:HtmlInline_AzurePipelines

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/**/coverage.cobertura.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: ./coverage-report/

  # Build and test on multiple platforms
  build-and-test:
    name: Build & Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore --verbosity normal

    - name: Run tests
      run: dotnet test ${{ env.SOLUTION_PATH }} --configuration Release --no-build --verbosity normal --logger "trx;LogFileName=test-results.trx"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}
        path: |
          **/test-results.trx
          **/*.log

  # Security scanning
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Run security scan
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'

    - name: Run dependency vulnerability check
      run: |
        dotnet list ${{ env.SOLUTION_PATH }} package --vulnerable --include-transitive
        if [ $? -eq 0 ]; then
          echo "✅ No vulnerable dependencies found"
        else
          echo "⚠️  Vulnerable dependencies detected - review required"
        fi

  # Docker build and test
  docker-build:
    name: Docker Build & Deploy
    runs-on: ubuntu-latest
    needs: [quality-checks, build-and-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub (if credentials provided)
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ubnt/secpilot
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # SonarQube quality analysis
  sonarqube-analysis:
    name: SonarQube Quality Analysis
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for SonarQube

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache SonarQube packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore

    - name: Run tests with coverage
      run: dotnet test ${{ env.SOLUTION_PATH }} --configuration Release --collect:"XPlat Code Coverage" --results-directory ./coverage --no-build

    - name: Generate coverage report for SonarQube
      run: |
        dotnet tool install --global dotnet-coverage
        dotnet-coverage merge ./coverage/*.cobertura.xml -o coverage.xml -f cobertura

    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
        SONAR_HOST_URL: http://localhost:9000
      with:
        args: >
          -Dsonar.projectKey=ubnt-secpilot
          -Dsonar.projectName=UBNT SecPilot
          -Dsonar.projectVersion=1.0.0
          -Dsonar.sources=UbntSecPilot.WebApi,UbntSecPilot.Application,UbntSecPilot.Domain,UbntSecPilot.Infrastructure,UbntSecPilot.Agents,UbntSecPilot.Agents.Orleans
          -Dsonar.tests=UbntSecPilot.Application.Tests,UbntSecPilot.Agents.Tests,UbntSecPilot.Orleans.Tests
          -Dsonar.test.inclusions=**/*Tests.cs,**/*Test.cs
          -Dsonar.coverage.exclusions=**/*Test*.cs,**/*Tests.cs,**/*.AssemblyInfo.cs,**/*.AssemblyAttributes.cs,**/Program.cs,**/Startup.cs
          -Dsonar.cs.opencover.reportsPaths=coverage.xml
          -Dsonar.qualitygate=ubnt-secpilot-quality-gate

    - name: SonarQube Quality Gate Check
      uses: sonarsource/sonarqube-quality-gate-action@master
      timeout-minutes: 5
      env:
        SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
        SONAR_HOST_URL: http://localhost:9000
      with:
        scanMetadataReportFile: .sonarqube/out/.sonar/report-task.txt

  # Deployment (example for staging)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    environment: staging

    steps:
    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "🔧 Infrastructure provisioning would happen here"
        echo "📦 Application deployment via Docker/Kubernetes"
        echo "🔍 Health checks and smoke tests"

        # Example deployment commands:
        # kubectl apply -f k8s/staging/
        # kubectl rollout status deployment/secpilot-api
        # curl -f https://staging-api.ubnt-secpilot.com/health

  # Notification and reporting
  notify:
    name: Notifications & Reports
    runs-on: ubuntu-latest
    needs: [quality-checks, build-and-test, security-scan, docker-build]
    if: always()

    steps:
    - name: Generate build summary
      run: |
        echo "## 🔧 Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY

        # Check job statuses and add to summary
        if [ "${{ needs.quality-checks.result }}" = "success" ]; then
          echo "| ✅ Code Quality | Passed |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| ❌ Code Quality | Failed |" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.build-and-test.result }}" = "success" ]; then
          echo "| ✅ Build & Test | Passed |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| ❌ Build & Test | Failed |" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.security-scan.result }}" = "success" ]; then
          echo "| ✅ Security | Passed |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| ⚠️ Security | Issues Found |" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.docker-build.result }}" = "success" ]; then
          echo "| ✅ Docker | Passed |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| ❌ Docker | Failed |" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Notify on failure
      if: failure()
      run: |
        echo "🚨 Build failed! Check the logs above for details."
        # Here you could integrate with Slack, Teams, or other notification systems
        # Example: curl -X POST -H 'Content-type: application/json' --data '{"text":"Build failed!"}' ${{ secrets.SLACK_WEBHOOK }}

    - name: Success notification
      if: success()
      run: |
        echo "🎉 All checks passed! Ready for deployment."
        echo "📊 Coverage report available in artifacts"
        echo "🐳 Docker images built and ready"
